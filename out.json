{
  "chunks": [
    {
      "id": "e4ace233f253b08b0c8fb0b8a19f8b84a892e1c39fe46408634010fd81e17ec4",
      "file_path": ".devcontainer/Dockerfile",
      "start_line": 1,
      "end_line": 100,
      "content": "# ------------------------------------------------------\n# Stage 1: Build and install Go + tools\n# ------------------------------------------------------\n  ARG GO_VERSION=1.24.0\n  FROM golang:${GO_VERSION} AS build\n  \n  RUN  go install -v github.com/air-verse/air@latest \\\n    \u0026\u0026 go install -v github.com/aurc/loggo@latest \\\n    \u0026\u0026 go install -v mvdan.cc/gofumpt@latest \\\n    \u0026\u0026 go install -v golang.org/x/tools/cmd/goimports@latest \\\n    \u0026\u0026 go install -v golang.org/x/tools/gopls@latest\n  \n  # ------------------------------------------------------\n  # Stage 2: Final devcontainer image\n  # ------------------------------------------------------\n  FROM mcr.microsoft.com/devcontainers/base:ubuntu\n  \n  ARG AWS_CLI_VERSION=2.23.5\n  ARG AWS_CDK_VERSION=2.177.0\n  ARG NODE_VERSION=22.13.1\n  ARG PYTHON_VER=3.10\n  \n  ENV AWS_CLI_VERSION=${AWS_CLI_VERSION}\n  ENV AWS_CDK_VERSION=${AWS_CDK_VERSION}\n  ENV NODE_VERSION=${NODE_VERSION}\n  ENV PYTHON_VER=${PYTHON_VER}\n  \n  # [NEW] Dependencies for Homebrew (Linuxbrew)\n  RUN apt-get update \\\n    \u0026\u0026 apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release \\\n    unzip \\\n    vim \\\n    inotify-tools \\\n    iputils-ping \\\n    socat \\\n    fswatch \\\n    expect \\\n    build-essential \\\n    file \\\n    git \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/*\n  \n  # ----------------------------\n  # Install Docker CLI + Docker Compose plugin\n  # ----------------------------\n  RUN sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\\n    | gpg --dearmor --batch --yes -o /usr/share/keyrings/docker-archive-keyring.gpg \\\n    \u0026\u0026 echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \\\n    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \\\n    \u003e /etc/apt/sources.list.d/docker.list \\\n    \u0026\u0026 apt-get update \\\n    \u0026\u0026 apt-get install -y docker-ce-cli docker-compose-plugin\n  \n  # ----------------------------\n  # Install AWS CLI v2\n  # ----------------------------\n  RUN cd /tmp \\\n    \u0026\u0026 curl -sSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip\" -o awscliv2.zip \\\n    \u0026\u0026 unzip awscliv2.zip \\\n    \u0026\u0026 ./aws/install \\\n    \u0026\u0026 rm -rf ./aws* \\\n    \u0026\u0026 cd -\n  \n  # ----------------------------\n  # Install Python\n  # ----------------------------\n  RUN apt-get update \\\n    \u0026\u0026 apt-get install -y python${PYTHON_VER} python${PYTHON_VER}-venv python${PYTHON_VER}-dev \\\n    \u0026\u0026 ln -sf /usr/bin/python${PYTHON_VER} /usr/local/bin/python \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/*\n  \n  # Add the 'vscode' user to the 'docker' group\n  RUN groupadd docker \\\n    \u0026\u0026 usermod -aG docker vscode\n  \n  # ----------------------------\n  # Install FNM and Node.js\n  # ----------------------------\n  RUN curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir /usr/local/fnm/bin --skip-shell\n  ENV FNM_DIR=/usr/local/fnm\n  ENV PATH=/usr/local/fnm/bin:${PATH}\n  RUN fnm install ${NODE_VERSION} \u0026\u0026 fnm default ${NODE_VERSION}\n  ENV PATH=/usr/local/fnm/aliases/default/bin:${PATH}\n  \n  # ----------------------------\n  # Install AWS CDK\n  # ----------------------------\n  RUN npm install -g aws-cdk@${AWS_CDK_VERSION} \n  \n  # ------------------------------------------------------\n  # Install Homebrew (Linuxbrew), jless\n  # ------------------------------------------------------\n  RUN /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" \\\n    \u0026\u0026 echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' \u003e\u003e /etc/bash.bashrc \\\n    \u0026\u0026 eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\" \\\n    \u0026\u0026 brew install jless ",
      "language": "dockerfile"
    },
    {
      "id": "6757eaa09e6177f2f31bd8815e1ba852b71c61c54ddb6ddedb2507d4eceaa3a5",
      "file_path": ".devcontainer/Dockerfile",
      "start_line": 101,
      "end_line": 125,
      "content": "  \n  # Make brew, jless, and fx available to the 'vscode' shell environment\n  RUN echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' \u003e\u003e /home/vscode/.bashrc \\\n    \u0026\u0026 echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' \u003e\u003e /home/vscode/.zshrc\n  \n  # --------------------------------------------------------\n  # Copy Go toolchain \u0026 installed binaries from build stage\n  # --------------------------------------------------------\n  COPY --from=build /usr/local/go/ /usr/local/go/\n  COPY --from=build /go /go\n  RUN chown -R vscode:vscode /go\n  \n  # Add Go to path\n  ENV GOPATH=/go\n  ENV PATH=/usr/local/go/bin:/go/bin:$PATH\n  \n  # ------------------------------------------------------\n  # Setup Workspace\n  # ------------------------------------------------------\n  WORKDIR /workspace\n  \n  RUN ln -s /workspace/.scripts/alias.sh /home/vscode/alias.sh \\\n    \u0026\u0026 echo \"source /home/vscode/alias.sh\" \u003e\u003e /home/vscode/.bashrc \\\n    \u0026\u0026 echo \"source /home/vscode/alias.sh\" \u003e\u003e /home/vscode/.zshrc\n  ",
      "language": "dockerfile"
    },
    {
      "id": "a8c2750dbd4fcae981d7c84a3996d30b7d252ee3038da4db7d7ea3768edd6c2b",
      "file_path": ".devcontainer/devcontainer.json",
      "start_line": 1,
      "end_line": 41,
      "content": "{\n    \"name\": \"chunk\",\n    \"workspaceFolder\": \"/workspace\",\n    \"dockerComposeFile\": \"../docker-compose.yml\",\n    \n    \"service\": \"devcontainer\",\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {\n          \"files.autoSave\": \"onFocusChange\",\n          \"go.lintTool\": \"golangci-lint\",\n          \"go.lintFlags\": [\n            \"--fast\"\n          ],\n          \"go.lintOnSave\": \"package\",\n          \"go.useLanguageServer\": true,\n          \"gopls\": {\n            \"formatting.gofumpt\": true\n          },\n          \"remote.localPortHost\": \"allInterfaces\"\n        },\n        \"extensions\": [\n          \"golang.go\",\n          \"ms-azuretools.vscode-docker\",\n          \"ms-vscode.aws-toolkit\",\n          \"AmazonWebServices.aws-toolkit-vscode\",\n          \"yzhang.markdown-all-in-one\",\n          \"usernamehw.errorlens\",\n          \"formulahendry.auto-rename-tag\",\n          \"esbenp.prettier-vscode\",\n          \"bradlc.vscode-tailwindcss\",\n          \"tabnine.tabnine-vscode\"\n        ]\n      }\n    },\n    \"mounts\": [\n      \"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\",\n      \"source=${localEnv:HOME}/.aws,target=/home/vscode/.aws,type=bind,consistency=cached\",\n      \"source=${localEnv:HOME}/.ssh,target=/home/vscode/.ssh,type=bind,consistency=cached\"\n    ]\n  }",
      "language": "json"
    },
    {
      "id": "116fe30dd4ced05b6fca1ea56ef0f160e2a42b5f434c7c29a8819f4aa22b1864",
      "file_path": ".gitignore",
      "start_line": 1,
      "end_line": 6,
      "content": "**/node_modules/\n**/cdk.out/\n.env\nchunk\nchunks.json\nout.json",
      "language": "unknown"
    },
    {
      "id": "9a57614d61a60adc77cd7f36e18b97e95f099d0d22d2b73b13946d0c632049df",
      "file_path": ".prettierrc.json",
      "start_line": 1,
      "end_line": 8,
      "content": "{\n    \"semi\": true,\n    \"trailingComma\": \"all\",\n    \"singleQuote\": true,\n    \"printWidth\": 120,\n    \"tabWidth\": 2,\n    \"plugins\": [\"prettier-plugin-tailwindcss\"]\n  }",
      "language": "json"
    },
    {
      "id": "27b3b1b5def06df31e33371f591e53846791fb91bc47c15fc62bb5f44c3f2f66",
      "file_path": ".scripts/alias.sh",
      "start_line": 1,
      "end_line": 16,
      "content": "#!/bin/zsh\n\neval \"$(dircolors -b)\"\nexport LS_OPTIONS='--color=auto'\nalias ls='ls $LS_OPTIONS'\nalias l='ls $LS_OPTIONS -lA'\nalias ll='ls $LS_OPTIONS -laFh '\n\nalias gotest='$(git rev-parse --show-toplevel)/.scripts/gotest.sh \"$@\"'\nalias gorun='while inotifywait -r -e close_write /workspace/monorepo ; do go run . | jq '.'; done'\nalias xclip='socat - tcp:host.docker.internal:8121'\nalias srctree='tree -d -a -I \"cdk.out\" -I \"node_modules\" -I \".git\" -I \".angular\" -I \"dist\"'\nalias rt='git rev-parse --show-toplevel'\nalias lgd='unbuffer aws logs tail \"/aws/lambda/huddle-websocket-default\" --follow --format short |  unbuffer -p cut -d \" \" -f 2- | loggo stream -t /workspace/loggo.fmt'\n\n",
      "language": "unknown"
    },
    {
      "id": "02cdcfa49ec98c30c6fa1b11d95eed165d08ef65240a8b12b6794dc96b5ac384",
      "file_path": ".scripts/gotest.sh",
      "start_line": 1,
      "end_line": 8,
      "content": "#!/bin/zsh\n\nroot=$(git rev-parse --show-toplevel)\ngo_dirs=\"${root}/cdk ${root}/cmd ${root}/pkg ${root}/internal\"\n\ndiv=\"\\n************************************************************\\n\"\nwhile inotifywait -r -e modify,create,delete $root ; do echo $div \u0026\u0026 go test ./... \"$@\"; done\n",
      "language": "unknown"
    },
    {
      "id": "7544d8ef405fb1ab17f7a04ebb8f824449ecf942ab2b5c53c814a5211455c6fb",
      "file_path": ".vscode/settings.json",
      "start_line": 1,
      "end_line": 3,
      "content": "{\n    \"files.autoSave\": \"onFocusChange\"\n}",
      "language": "json"
    },
    {
      "id": "e04cb9ee2f03244b76d66e47a479bba474415d7c22720c23e37af741b0ee39ae",
      "file_path": "LICENSE",
      "start_line": 1,
      "end_line": 22,
      "content": "MIT License\n\nCopyright (c) 2025 John Dibling\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "language": "unknown"
    },
    {
      "id": "c80f7637d5a0c12fcf8c1adf82735d991faac3ca9b35717991b03ab9ffff4c97",
      "file_path": "README.md",
      "start_line": 1,
      "end_line": 3,
      "content": "# devcontainer\nSimple starter repo for setting up a project using devcontainers.\n",
      "language": "markdown"
    },
    {
      "id": "55464741a336b619ed0288e654df915357bc4cd34606affd3beb7ba812c908fa",
      "file_path": "docker-compose.yml",
      "start_line": 1,
      "end_line": 15,
      "content": "name: chunk\nservices:\n  devcontainer:\n    container_name: devcontainer\n    build:\n      context: .\n      dockerfile: .devcontainer/Dockerfile\n    volumes:\n      - ./:/workspace:rw\n    environment:\n      - AUTH0_DOMAIN=${AUTH0_DOMAIN}\n      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}\n    command: sleep infinity\n\n",
      "language": "yaml"
    },
    {
      "id": "5a3465289ffdf0afb5630252921e115e32f5526f7bfb8fcd00e3943f1589e0f0",
      "file_path": "go.mod",
      "start_line": 1,
      "end_line": 33,
      "content": "module github.com/stream-ai/chunk\n\ngo 1.24.0\n\nrequire (\n\tgithub.com/spf13/cobra v1.9.1\n\tgithub.com/spf13/viper v1.19.0\n)\n\nrequire (\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.2 // indirect\n\tgithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06 // indirect\n\tgithub.com/sagikazarmark/locafero v0.4.0 // indirect\n\tgithub.com/sagikazarmark/slog-shim v0.1.0 // indirect\n\tgithub.com/sourcegraph/conc v0.3.0 // indirect\n\tgithub.com/spf13/afero v1.11.0 // indirect\n\tgithub.com/spf13/cast v1.6.0 // indirect\n\tgithub.com/spf13/pflag v1.0.6 // indirect\n\tgithub.com/subosito/gotenv v1.6.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.9.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n",
      "language": "unknown"
    },
    {
      "id": "7b68cac48c307e9b7c26a6c8bfaedc8ad903414240b7dc67525d1316de48bb7b",
      "file_path": "go.sum",
      "start_line": 1,
      "end_line": 50,
      "content": "github.com/cpuguy83/go-md2man/v2 v2.0.6/go.mod h1:oOW0eioCTA6cOiMLiUPZOpcVxMig6NIQQ7OS05n1F4g=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=\ngithub.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06 h1:OkMGxebDjyw0ULyrTYWeN0UNCCkmCWfjPnIA2W6oviI=\ngithub.com/sabhiram/go-gitignore v0.0.0-20210923224102-525f6e181f06/go.mod h1:+ePHsJ1keEjQtpvf9HHw0f4ZeJ0TLRsxhunSI2hYJSs=\ngithub.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=\ngithub.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.6.0 h1:GEiTHELF+vaR5dhz3VqZfFSzZjYbgeKDpBxQVS4GYJ0=\ngithub.com/spf13/cast v1.6.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.9.1 h1:CXSaggrXdbHK9CF+8ywj8Amf7PBRmPCOJugH954Nnlo=\ngithub.com/spf13/cobra v1.9.1/go.mod h1:nDyEzZ8ogv936Cinf6g1RU9MRY64Ir93oCnqb9wxYW0=\ngithub.com/spf13/pflag v1.0.6 h1:jFzHGLGAlb3ruxLB8MhbI6A8+AQX/2eW4qeyNZXNp2o=\ngithub.com/spf13/pflag v1.0.6/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=\ngithub.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=",
      "language": "unknown"
    },
    {
      "id": "9bace1b1c85f3340cfd29c872a26303d879a04f59de1dd7eb36cf3e3cb811f00",
      "file_path": "go.sum",
      "start_line": 51,
      "end_line": 81,
      "content": "github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/multierr v1.9.0 h1:7fIwc/ZtS0q++VgcfqFDxSBZVv/Xo49/SYnDFupUwlI=\ngo.uber.org/multierr v1.9.0/go.mod h1:X2jQV1h+kxSjClGpnseKVIxpmcjrj7MNnI0bnlfKTVQ=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9 h1:GoHiUyI/Tp2nVkLI2mCxVkOjsbSXD66ic0XW0js0R9g=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9/go.mod h1:S2oDrQGGwySpoQPVqRShND87VCbxmc6bL1Yd2oYrm6k=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n",
      "language": "unknown"
    },
    {
      "id": "a306b89a3fa0d070ba62f653284194d14707fc5c38e8f632e0da9e6d24e0028b",
      "file_path": "main.go",
      "start_line": 1,
      "end_line": 19,
      "content": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\tignore \"github.com/sabhiram/go-gitignore\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n\n// Chunk represents a single code chunk",
      "language": "go"
    },
    {
      "id": "f3efea0402cd5298c35636930431612d53e2dcb6fe3f24003adcda9a1bd65a3a",
      "file_path": "main.go",
      "start_line": 20,
      "end_line": 555,
      "content": "type Chunk struct {\n\tID        string `json:\"id\"`\n\tFilePath  string `json:\"file_path\"`\n\tStartLine int    `json:\"start_line\"`\n\tEndLine   int    `json:\"end_line\"`\n\tContent   string `json:\"content\"`\n\tLanguage  string `json:\"language\"`\n}\n\n// ChunkResult contains all chunks from processing\ntype ChunkResult struct {\n\tChunks []Chunk `json:\"chunks\"`\n}\n\n// GitIgnoreManager manages .gitignore rules across the directory tree\ntype GitIgnoreManager struct {\n\tignores map[string]*ignore.GitIgnore\n\trootDir string\n}\n\n// NewGitIgnoreManager creates a new GitIgnoreManager\nfunc NewGitIgnoreManager(rootDir string) *GitIgnoreManager {\n\treturn \u0026GitIgnoreManager{\n\t\tignores: make(map[string]*ignore.GitIgnore),\n\t\trootDir: rootDir,\n\t}\n}\n\n// LoadGitIgnores loads all .gitignore files in the directory tree\nfunc (gim *GitIgnoreManager) LoadGitIgnores() error {\n\treturn filepath.Walk(gim.rootDir, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() \u0026\u0026 filepath.Base(path) == \".gitignore\" {\n\t\t\tdir := filepath.Dir(path)\n\t\t\tgitignore, err := ignore.CompileIgnoreFile(path)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tgim.ignores[dir] = gitignore\n\t\t}\n\n\t\treturn nil\n\t})\n}\n\n// IsIgnored checks if a file should be ignored based on .gitignore rules\nfunc (gim *GitIgnoreManager) IsIgnored(path string) bool {\n\t// Start from the file's directory and walk up to the root\n\tdir := filepath.Dir(path)\n\tfor {\n\t\tif gitignore, exists := gim.ignores[dir]; exists {\n\t\t\trelPath, err := filepath.Rel(dir, path)\n\t\t\tif err == nil \u0026\u0026 gitignore.MatchesPath(relPath) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\t// Stop if we've reached the root or beyond\n\t\tif dir == gim.rootDir || !strings.HasPrefix(dir, gim.rootDir) {\n\t\t\tbreak\n\t\t}\n\n\t\t// Move up one directory\n\t\tdir = filepath.Dir(dir)\n\t}\n\n\treturn false\n}\n\n// isBinaryFile determines if a file is likely binary based on extension\nfunc isBinaryFile(filename string) bool {\n\text := strings.ToLower(filepath.Ext(filename))\n\tbinaryExts := map[string]bool{\n\t\t\".exe\":   true,\n\t\t\".dll\":   true,\n\t\t\".so\":    true,\n\t\t\".dylib\": true,\n\t\t\".bin\":   true,\n\t\t\".obj\":   true,\n\t\t\".o\":     true,\n\t\t\".a\":     true,\n\t\t\".lib\":   true,\n\t\t\".png\":   true,\n\t\t\".jpg\":   true,\n\t\t\".jpeg\":  true,\n\t\t\".gif\":   true,\n\t\t\".bmp\":   true,\n\t\t\".tiff\":  true,\n\t\t\".ico\":   true,\n\t\t\".zip\":   true,\n\t\t\".tar\":   true,\n\t\t\".gz\":    true,\n\t\t\".bz2\":   true,\n\t\t\".7z\":    true,\n\t\t\".rar\":   true,\n\t\t\".pdf\":   true,\n\t\t\".doc\":   true,\n\t\t\".docx\":  true,\n\t\t\".xls\":   true,\n\t\t\".xlsx\":  true,\n\t\t\".ppt\":   true,\n\t\t\".pptx\":  true,\n\t}\n\n\treturn binaryExts[ext]\n}\n\n// detectLanguage determines the language based on file extension\nfunc detectLanguage(filename string) string {\n\text := strings.ToLower(filepath.Ext(filename))\n\tbaseName := strings.ToLower(filepath.Base(filename))\n\n\tswitch ext {\n\tcase \".go\":\n\t\treturn \"go\"\n\tcase \".ts\":\n\t\treturn \"typescript\"\n\tcase \".js\":\n\t\treturn \"javascript\"\n\tcase \".jsx\":\n\t\treturn \"jsx\"\n\tcase \".tsx\":\n\t\treturn \"tsx\"\n\tcase \".css\":\n\t\treturn \"css\"\n\tcase \".scss\":\n\t\treturn \"scss\"\n\tcase \".less\":\n\t\treturn \"less\"\n\tcase \".html\":\n\t\treturn \"html\"\n\tcase \".json\":\n\t\treturn \"json\"\n\tcase \".yaml\", \".yml\":\n\t\treturn \"yaml\"\n\tcase \".toml\":\n\t\treturn \"toml\"\n\tcase \".md\", \".markdown\":\n\t\treturn \"markdown\"\n\t}\n\n\t// Check for special filenames\n\tif baseName == \"dockerfile\" || strings.HasPrefix(baseName, \"dockerfile.\") {\n\t\treturn \"dockerfile\"\n\t}\n\n\treturn \"unknown\"\n}\n\n// processFile processes a single file and returns its chunks\nfunc processFile(filePath string) ([]Chunk, error) {\n\tlanguage := detectLanguage(filePath)\n\n\t// Read file content\n\tcontent, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tlines := strings.Split(string(content), \"\\n\")\n\tvar chunks []Chunk\n\n\t// Choose chunking strategy based on language\n\tswitch language {\n\tcase \"go\":\n\t\tchunks = chunkGoFile(filePath, lines)\n\tcase \"typescript\", \"javascript\", \"jsx\", \"tsx\":\n\t\tchunks = chunkJSFile(filePath, lines, language)\n\tcase \"json\", \"yaml\", \"toml\", \"markdown\", \"dockerfile\":\n\t\tchunks = chunkMarkupFile(filePath, lines, language)\n\tdefault:\n\t\t// Use line-based chunking for unknown file types\n\t\tchunks = chunkLineBasedFile(filePath, lines, language)\n\t}\n\n\treturn chunks, nil\n}\n\n// chunkGoFile chunks a Go file with awareness of function boundaries\nfunc chunkGoFile(filePath string, lines []string) []Chunk {\n\tvar chunks []Chunk\n\tvar currentChunk []string\n\tstartLine := 1\n\tinsideBlock := false\n\tbraceCount := 0\n\n\tfuncRegex := regexp.MustCompile(`^func\\s+\\w+.*{$`)\n\ttypeRegex := regexp.MustCompile(`^type\\s+\\w+.*{$`)\n\n\tfor i, line := range lines {\n\t\t// Check for new function or type definition\n\t\tif !insideBlock \u0026\u0026 (funcRegex.MatchString(line) || typeRegex.MatchString(line)) {\n\t\t\t// If we have a current chunk, add it\n\t\t\tif len(currentChunk) \u003e 0 {\n\t\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\t\tFilePath:  filePath,\n\t\t\t\t\tStartLine: startLine,\n\t\t\t\t\tEndLine:   i,\n\t\t\t\t\tContent:   content,\n\t\t\t\t\tLanguage:  \"go\",\n\t\t\t\t})\n\n\t\t\t\tcurrentChunk = []string{}\n\t\t\t}\n\n\t\t\tinsideBlock = true\n\t\t\tstartLine = i + 1\n\t\t\tbraceCount = 1 // Opening brace on the function/type line\n\t\t}\n\n\t\t// Add the line to the current chunk\n\t\tcurrentChunk = append(currentChunk, line)\n\n\t\t// Count braces to track block boundaries\n\t\tif insideBlock {\n\t\t\tbraceCount += strings.Count(line, \"{\") - strings.Count(line, \"}\")\n\t\t\tif braceCount == 0 {\n\t\t\t\t// Block has ended\n\t\t\t\tinsideBlock = false\n\t\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\t\tFilePath:  filePath,\n\t\t\t\t\tStartLine: startLine,\n\t\t\t\t\tEndLine:   i + 1,\n\t\t\t\t\tContent:   content,\n\t\t\t\t\tLanguage:  \"go\",\n\t\t\t\t})\n\n\t\t\t\tcurrentChunk = []string{}\n\t\t\t\tstartLine = i + 2\n\t\t\t}\n\t\t}\n\n\t\t// If we have accumulated many lines outside a block, create a chunk\n\t\tif !insideBlock \u0026\u0026 len(currentChunk) \u003e= 50 {\n\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\tFilePath:  filePath,\n\t\t\t\tStartLine: startLine,\n\t\t\t\tEndLine:   i + 1,\n\t\t\t\tContent:   content,\n\t\t\t\tLanguage:  \"go\",\n\t\t\t})\n\n\t\t\tcurrentChunk = []string{}\n\t\t\tstartLine = i + 2\n\t\t}\n\t}\n\n\t// Add any remaining lines as a chunk\n\tif len(currentChunk) \u003e 0 {\n\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\tchunks = append(chunks, Chunk{\n\t\t\tID:        generateChunkID(filePath, content),\n\t\t\tFilePath:  filePath,\n\t\t\tStartLine: startLine,\n\t\t\tEndLine:   len(lines),\n\t\t\tContent:   content,\n\t\t\tLanguage:  \"go\",\n\t\t})\n\t}\n\n\treturn chunks\n}\n\n// chunkJSFile chunks a JS/TS file with awareness of function/class boundaries\nfunc chunkJSFile(filePath string, lines []string, language string) []Chunk {\n\tvar chunks []Chunk\n\tvar currentChunk []string\n\tstartLine := 1\n\tinsideBlock := false\n\tbraceCount := 0\n\n\tfuncRegex := regexp.MustCompile(`(function\\s+\\w+|const\\s+\\w+\\s*=\\s*function|class\\s+\\w+|const\\s+\\w+\\s*=\\s*class).*{`)\n\n\tfor i, line := range lines {\n\t\t// Check for new function or class definition\n\t\tif !insideBlock \u0026\u0026 funcRegex.MatchString(line) {\n\t\t\t// If we have a current chunk, add it\n\t\t\tif len(currentChunk) \u003e 0 {\n\t\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\t\tFilePath:  filePath,\n\t\t\t\t\tStartLine: startLine,\n\t\t\t\t\tEndLine:   i,\n\t\t\t\t\tContent:   content,\n\t\t\t\t\tLanguage:  language,\n\t\t\t\t})\n\n\t\t\t\tcurrentChunk = []string{}\n\t\t\t}\n\n\t\t\tinsideBlock = true\n\t\t\tstartLine = i + 1\n\t\t\tbraceCount = strings.Count(line, \"{\")\n\t\t}\n\n\t\t// Add the line to the current chunk\n\t\tcurrentChunk = append(currentChunk, line)\n\n\t\t// Count braces to track block boundaries\n\t\tif insideBlock {\n\t\t\tbraceCount += strings.Count(line, \"{\") - strings.Count(line, \"}\")\n\t\t\tif braceCount == 0 {\n\t\t\t\t// Block has ended\n\t\t\t\tinsideBlock = false\n\t\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\t\tFilePath:  filePath,\n\t\t\t\t\tStartLine: startLine,\n\t\t\t\t\tEndLine:   i + 1,\n\t\t\t\t\tContent:   content,\n\t\t\t\t\tLanguage:  language,\n\t\t\t\t})\n\n\t\t\t\tcurrentChunk = []string{}\n\t\t\t\tstartLine = i + 2\n\t\t\t}\n\t\t}\n\n\t\t// If we have accumulated many lines outside a block, create a chunk\n\t\tif !insideBlock \u0026\u0026 len(currentChunk) \u003e= 30 {\n\t\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\t\tchunks = append(chunks, Chunk{\n\t\t\t\tID:        generateChunkID(filePath, content),\n\t\t\t\tFilePath:  filePath,\n\t\t\t\tStartLine: startLine,\n\t\t\t\tEndLine:   i + 1,\n\t\t\t\tContent:   content,\n\t\t\t\tLanguage:  language,\n\t\t\t})\n\n\t\t\tcurrentChunk = []string{}\n\t\t\tstartLine = i + 2\n\t\t}\n\t}\n\n\t// Add any remaining lines as a chunk\n\tif len(currentChunk) \u003e 0 {\n\t\tcontent := strings.Join(currentChunk, \"\\n\")\n\t\tchunks = append(chunks, Chunk{\n\t\t\tID:        generateChunkID(filePath, content),\n\t\t\tFilePath:  filePath,\n\t\t\tStartLine: startLine,\n\t\t\tEndLine:   len(lines),\n\t\t\tContent:   content,\n\t\t\tLanguage:  language,\n\t\t})\n\t}\n\n\treturn chunks\n}\n\n// chunkMarkupFile chunks a markup file (JSON, YAML, etc.)\nfunc chunkMarkupFile(filePath string, lines []string, language string) []Chunk {\n\t// For markup files, use a larger chunk size\n\tchunkSize := 100\n\treturn chunkByLineCount(filePath, lines, language, chunkSize)\n}\n\n// chunkLineBasedFile chunks a file based on line count (fallback method)\nfunc chunkLineBasedFile(filePath string, lines []string, language string) []Chunk {\n\tchunkSize := 50\n\treturn chunkByLineCount(filePath, lines, language, chunkSize)\n}\n\n// chunkByLineCount chunks a file into fixed-size chunks based on line count\nfunc chunkByLineCount(filePath string, lines []string, language string, chunkSize int) []Chunk {\n\tvar chunks []Chunk\n\n\tfor i := 0; i \u003c len(lines); i += chunkSize {\n\t\tendIdx := i + chunkSize\n\t\tif endIdx \u003e len(lines) {\n\t\t\tendIdx = len(lines)\n\t\t}\n\n\t\tchunkLines := lines[i:endIdx]\n\t\tcontent := strings.Join(chunkLines, \"\\n\")\n\n\t\tchunks = append(chunks, Chunk{\n\t\t\tID:        generateChunkID(filePath, content),\n\t\t\tFilePath:  filePath,\n\t\t\tStartLine: i + 1,\n\t\t\tEndLine:   endIdx,\n\t\t\tContent:   content,\n\t\t\tLanguage:  language,\n\t\t})\n\t}\n\n\treturn chunks\n}\n\n// generateChunkID creates a stable ID for a chunk based on file path and content\nfunc generateChunkID(filePath, content string) string {\n\thasher := sha256.New()\n\thasher.Write([]byte(filePath))\n\thasher.Write([]byte(content))\n\treturn hex.EncodeToString(hasher.Sum(nil))\n}\n\n// processDirectory processes all files in a directory recursively\nfunc processDirectory(rootDir string) (ChunkResult, error) {\n\tvar result ChunkResult\n\n\t// Initialize and load .gitignore files\n\tignoreManager := NewGitIgnoreManager(rootDir)\n\tif err := ignoreManager.LoadGitIgnores(); err != nil {\n\t\treturn result, err\n\t}\n\n\t// Walk the directory recursively\n\terr := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Skip directories that should be excluded\n\t\tif info.IsDir() {\n\t\t\tdirname := info.Name()\n\n\t\t\t// Skip .git directory\n\t\t\tif dirname == \".git\" {\n\t\t\t\treturn filepath.SkipDir\n\t\t\t}\n\n\t\t\t// Skip other common directories to ignore\n\t\t\tdirsToSkip := map[string]bool{\n\t\t\t\t\"node_modules\": true,\n\t\t\t\t\"vendor\":       true,\n\t\t\t\t\"dist\":         true,\n\t\t\t\t\"build\":        true,\n\t\t\t\t\"target\":       true,\n\t\t\t}\n\n\t\t\tif dirsToSkip[dirname] {\n\t\t\t\treturn filepath.SkipDir\n\t\t\t}\n\n\t\t\treturn nil\n\t\t}\n\n\t\t// Check if the file should be ignored\n\t\tif ignoreManager.IsIgnored(path) {\n\t\t\treturn nil\n\t\t}\n\n\t\t// Skip binary files\n\t\tif isBinaryFile(path) {\n\t\t\treturn nil\n\t\t}\n\n\t\t// Process the file\n\t\tfileChunks, err := processFile(path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error processing %s: %v\", path, err)\n\t\t}\n\n\t\tresult.Chunks = append(result.Chunks, fileChunks...)\n\t\treturn nil\n\t})\n\n\treturn result, err\n}\n\n// outputResult writes the result to the specified output path\nfunc outputResult(result ChunkResult, outputPath string) error {\n\tvar output io.Writer\n\n\tif outputPath == \"-\" {\n\t\toutput = os.Stdout\n\t} else {\n\t\tfile, err := os.Create(outputPath)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer file.Close()\n\t\toutput = file\n\t}\n\n\tencoder := json.NewEncoder(output)\n\tencoder.SetIndent(\"\", \"  \")\n\treturn encoder.Encode(result)\n}\n\nfunc main() {\n\t// Create the root command\n\trootCmd := \u0026cobra.Command{\n\t\tUse:   \"chunk\",\n\t\tShort: \"Chunk splits code files into discrete chunks for AI analysis\",\n\t\tLong: `Chunk is a tool that recursively scans a source tree and splits code files into \ndiscrete chunks for AI code assistance and RAG workflows. It supports various languages\nand respects .gitignore rules.`,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\t// Get the options\n\t\t\tdir := viper.GetString(\"dir\")\n\t\t\toutput := viper.GetString(\"output\")\n\n\t\t\t// Run the chunking process\n\t\t\tresult, err := processDirectory(dir)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\n\t\t\t// Output the result\n\t\t\terr = outputResult(result, output)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t},\n\t}\n\n\t// Add flags\n\trootCmd.Flags().StringP(\"dir\", \"d\", \".\", \"Directory to process\")\n\trootCmd.Flags().StringP(\"output\", \"o\", \"-\", \"Output file (- for stdout)\")\n\n\t// Bind flags to viper\n\tviper.BindPFlags(rootCmd.Flags())\n\n\t// Execute the command\n\tif err := rootCmd.Execute(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n",
      "language": "go"
    },
    {
      "id": "2ed66f9a78cae5017196e81e81aec69c8bff93ed76781f62e2f557aeb50db18b",
      "file_path": "test.ts",
      "start_line": 1,
      "end_line": 2,
      "content": "function helloWorld() { console.log('Hello'); }\n",
      "language": "typescript"
    }
  ]
}
